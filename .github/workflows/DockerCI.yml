name: Docker CI

on:
  push:

env:
  IMAGE: ghcr.io/${{ github.actor }}/stars-of-eternity-bot

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lowercase env
        run: echo ${{ env.IMAGE }} | tr '[:upper:]' '[:lower:]' | echo "IMAGE=$(</dev/stdin)" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=branch,suffix=-{{sha}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup CACHE_TAG as the based on the first tag of docker metadata
        run: echo "CACHE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | sed 1q)-cache" >> $GITHUB_ENV
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          cache-from: type=registry,ref=${{ env.CACHE_TAG }}
          cache-to: type=registry,ref=${{ env.CACHE_TAG }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Lowercase env
        run: echo ${{ env.IMAGE }} | tr '[:upper:]' '[:lower:]' | echo "IMAGE=$(</dev/stdin)" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE }}
          tags: |
            type=ref,event=pr,prefix={{base_ref}}-
            type=ref,event=branch
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup IMAGE_TAG env
        run: |
          IMAGE=$(echo "${{ steps.meta.outputs.tags }}" | sed 1q)
          echo "IMAGE_TAG=$IMAGE" >> $GITHUB_ENV
      - name: Run linter
        run: docker container run --rm ${{ env.IMAGE_TAG }} npm run lint
